<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns:wsc="http://www.mulesoft.org/schema/mule/wsc"
	xmlns:american-flights-api="http://www.mulesoft.org/schema/mule/american-flights-api" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/american-flights-api http://www.mulesoft.org/schema/mule/american-flights-api/current/mule-american-flights-api.xsd
http://www.mulesoft.org/schema/mule/wsc http://www.mulesoft.org/schema/mule/wsc/current/mule-wsc.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd">
	<flow name="getAmericanFlights" doc:id="198abcbe-53a0-4d5d-a5ad-848f26e2ab88" >
		<american-flights-api:get-flights doc:name="Get flights" doc:id="d822cc3a-c217-4e00-9e3a-7635c6ebd993" config-ref="American_Flights_API_Config" client-id="${american.client_id}" client-secret="${american.client_secret}" destination="#[vars.code]"/>
		<ee:transform doc:name="JSON to [Flight]" doc:id="db2b73fd-9a9c-4ba9-b935-d63f0143921c" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
payload map ( payload01 , indexOfPayload01 ) -> {
	airlineName: "American",
	availableSeats: payload01.emptySeats,
	departureDate: payload01.departureDate,
	destination: payload01.destination,
	flightCode: payload01.code,
	origination: payload01.origin,
	planeType: payload01.plane."type",
	price: payload01.price
} as Object {
	class : "com.mulesoft.training.Flight"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="b1662baf-8120-49d9-8200-2834326ba31d" />
		<error-handler >
			<on-error-continue enableNotifications="true" logException="true" doc:name="Copy_of_On Error Continue" doc:id="43bff09c-6143-4cb5-bbbb-614d5d3c659c" type="AMERICAN-FLIGHTS-API:BAD_REQUEST" >
				<ee:transform doc:name="Copy_of_Transform Message" doc:id="5e7e40d9-f664-4214-b092-779e46a35f45" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	"message": "No flights to " ++ vars.code as String
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<set-variable value="200" doc:name="Copy_of_httpStatus" doc:id="2e4cf8b4-6334-45d3-b458-c06726bc5009" variableName="httpStatus" />
			</on-error-continue>
		</error-handler>
	</flow>
	<sub-flow name="setCode" doc:id="73c1706f-061e-4663-9cc4-9c06c5c83192" >
		<set-variable value="#[message.attributes.queryParams.code]" doc:name="code" doc:id="3db06a9a-b387-46a9-8fde-d038327dd995" variableName="code"/>
	</sub-flow>
	<flow name="getUnitedFlights" doc:id="d6ffb12e-3aaa-4f46-b65f-efbbbe627a1a" >
		<http:request method="GET" doc:name="Get flights" doc:id="5946342a-96b1-4196-b7e7-ba4c18cd16b0" config-ref="HTTP_Request_config_training" path="/united/flights/{dest}">
			<http:uri-params ><![CDATA[#[output application/java
---
{
	"dest" : vars.code
}]]]></http:uri-params>
		</http:request>
		<ee:transform doc:name="JSON to [Flight]" doc:id="85dfc9cd-67c5-46ff-b8d2-98ae96a82ab8" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
payload.flights map ( flight , indexOfFlight ) -> {
	airlineName: flight.airlineName,
	availableSeats: flight.emptySeats,
	departureDate: flight.departureDate,
	destination: flight.destination,
	flightCode: flight.code,
	origination: flight.origin,
	planeType: flight.planeType,
	price: flight.price
} as Object {
	class : "com.mulesoft.training.Flight"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="d01afc18-4e7c-4234-a298-5f6aabaf390f" />
	</flow>
	<flow name="getDeltaFlights" doc:id="0f0d8c9b-ec6c-45f0-945e-55c0809a758e" >
		<ee:transform doc:name="Pass code" doc:id="8c5efa09-0fdb-40a1-86d9-1925ebc3f88b" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/xml
ns ns0 http://soap.training.mulesoft.com/
---
{
	ns0#findFlight: {
		destination: vars.code
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<wsc:consume doc:name="Get flights" doc:id="68e1df63-e93d-42aa-a8d9-d330653d43b2" config-ref="Delta_Web_Service_Consumer_Config" operation="findFlight"/>
		<ee:transform doc:name="SOAP to [Flight]" doc:id="49c144a7-ee32-4747-9768-7074f846b6d9" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
ns ns0 http://soap.training.mulesoft.com/
---
payload.body.ns0#findFlightResponse.*return map ( return , indexOfReturn ) -> {
	airlineName: return.airlineName,
	availableSeats: return.emptySeats,
	departureDate: return.departureDate,
	destination: return.destination,
	flightCode: return.code,
	origination: return.origin,
	planeType: return.planeType,
	price: return.price
} as Object {
	class : "com.mulesoft.training.Flight"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="8f2a78bb-de11-456a-a8e8-e54b039fe0ce" />
	</flow>
	<flow name="getFlights" doc:id="123f7dd1-9b95-4259-bb13-90225a8c7ed6" >
		<set-variable value="#[attributes.queryParams.airline]" doc:name="airline" doc:id="f03639fd-5a05-451b-8aa0-0a32c0a497da" variableName="airline"/>
		<flow-ref doc:name="setCode" doc:id="147e7fd9-1f00-41b1-9222-aa00333e5530" name="setCode"/>
		<validation:is-true doc:name="Is valid destination" doc:id="cd5743f0-0b6f-4f97-93a8-b74dbb6b4a2b" expression="#[['SFO','LAX','CLE','PDX','PDF'] contains vars.code]" message="#['Invalid destination' ++ ' ' ++ (vars.code default' ')]">
			<error-mapping sourceType="VALIDATION:INVALID_BOOLEAN" targetType="APP:INVALID_DESTINATION" />
		</validation:is-true>
		<choice doc:name="Choice" doc:id="9cf1c3f1-dd71-45a6-8e6d-5dc5fe4fa556" >
			<when expression='#[vars.airline == "american"]'>
				<flow-ref doc:name="getAmericanFlights" doc:id="a159da20-4e44-458b-9320-bbfe979c11b8" name="getAmericanFlights"/>
			</when>
			<when expression='#[vars.airline == "united"]'>
				<flow-ref doc:name="getUnitedFlights" doc:id="887ca33f-5929-4125-8cd5-5898cf1e5900" name="getUnitedFlights"/>
			</when>
			<when expression='#[vars.airline == "delta"]'>
				<flow-ref doc:name="getDeltaFlights" doc:id="0d451028-0938-4e09-bfa3-4289eb65cd32" name="getDeltaFlights"/>
			</when>
			<otherwise >
				<flow-ref doc:name="getAllAirlineFlights" doc:id="192ac2ba-536f-4bb8-b49c-0b1be9189596" name="getAllAirlineFlights"/>
			</otherwise>
		</choice>
		<ee:transform doc:name="[Flight] to JSON" doc:id="92f38145-9607-4638-93ed-3146ec5ccea7" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
payload]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="0aae3859-7221-4958-99a6-93d2adb67ee7" />
	</flow>
	<flow name="getAllAirlineFlights" doc:id="006f8a00-bf36-49d1-b8e0-4de6b8ffa9d8" >
		<scatter-gather doc:name="Scatter-Gather" doc:id="a3b3c1ab-574b-4606-beea-d3c2151001a0" >
			<route >
				<try doc:name="Try" doc:id="3875336c-6bfe-489e-a2cc-c8f01a2ec12b" >
					<flow-ref doc:name="getAmericanFlights" doc:id="c3532466-2ca9-4f58-a689-6ae882255309" name="getAmericanFlights" />
					<error-handler >
						<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="c015c957-61ef-4c3b-b20c-c50f4e60a8ba" type="ANY">
							<ee:transform doc:name="[]" doc:id="74fea075-c957-4abd-a7bd-aae4d7c8285e" >
								<ee:message >
									<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
[]]]></ee:set-payload>
								</ee:message>
							</ee:transform>
						</on-error-continue>
					</error-handler>
				</try>
			</route>
			<route >
				<try doc:name="Try" doc:id="47a9d74e-65db-43ad-a9a2-1fe25fc14f19" >
					<flow-ref doc:name="getUnitedFlights" doc:id="4ca202f7-3abd-4090-9b5b-33f76e7c4cd0" name="getUnitedFlights" />
					<error-handler >
						<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="6753bc91-76dd-4832-a67b-f06f0183eb7b" type="ANY">
							<ee:transform doc:name="[]" doc:id="8fd02c83-d282-4f67-aa88-22facaaa38bd" >
								<ee:message >
									<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
[]]]></ee:set-payload>
								</ee:message>
							</ee:transform>
						</on-error-continue>
					</error-handler>
				</try>
			</route>
			<route >
				<try doc:name="Try" doc:id="5e3e5e7d-9cef-45b0-a71d-a1577ffab2ee" >
					<flow-ref doc:name="getDeltaFlights" doc:id="84c86966-930d-4cd6-8b01-39abc68ffc3c" name="getDeltaFlights" />
					<error-handler >
						<on-error-continue enableNotifications="true" logException="true" doc:name="On Error Continue" doc:id="4085081f-a354-41a0-8c89-42345b2f3de5" type="ANY">
							<ee:transform doc:name="[]" doc:id="258643e8-43cd-4be7-ae73-3a4596f48aaa" >
								<ee:message >
									<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
[]]]></ee:set-payload>
								</ee:message>
							</ee:transform>
						</on-error-continue>
					</error-handler>
				</try>
			</route>
		</scatter-gather>
		<ee:transform doc:name="flatten to [Flight]" doc:id="014a47d9-b0b6-49df-a9d9-15e630891c43" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
---
flatten(payload..payload)]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="4f8922fe-45cc-401d-8170-5950220bbcc0" />
	</flow>
	<flow name="postFlight" doc:id="4408341e-1eba-4c95-815d-f6872606dcdb" >
		<ee:transform doc:name="Transform Message" doc:id="f95f4875-fb50-4502-b3e1-7d6cb989a946" >
			<ee:message >
				<ee:set-payload resource="json_flight_playground.dwl" />
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="DWoutput" ><![CDATA[%dw 2.0
output application/xml
---
data: {
	hub: "MUA",
	flight @(airline: payload.airline): {
		code: payload.toAirportCode
	}
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="a4c62b61-87b1-4c3c-bebe-5788fb5f05d5" message="#[vars.DWoutput]"/>
	</flow>
	<flow name="getTotalSeats" doc:id="badd7398-774c-47b5-9907-21a64128dabe" >
		<ee:transform doc:name="Transform Message" doc:id="c3b4f07f-8eb4-43b1-a918-8783f066e9c1" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/java
fun getNumSeats(planeType: String) = do {
	var maxSeats =
		if (planeType contains('737'))
			150
		else
			300
	---
	maxSeats
}
---
getNumSeats(payload.planeType)]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
	<flow name="postMultipleFlights" doc:id="8b71324b-542c-45fb-a58d-ac3224ea1c29" >
		<http:listener doc:name="POST /multipleflights" doc:id="173faa81-5a32-4e53-8b3b-d9908ab4393a" config-ref="HTTP_Listener_config" path="/multipleflights" allowedMethods="POST"/>
		<ee:transform doc:name="Transform Message" doc:id="12c5c09f-5f15-4986-b45c-d023f66d7b0e" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/dw
import dasherize from dw::core::Strings
type Currency = String {format: "###.00"}
type Flight = Object {class: "com.mulesoft.training.Flight"}

// var numSeats = 400
// var numSeats = (x=400) -> x
/* var numSeats = (planeType: String) ->
	if (planeType contains('737'))
		150
	else
		300
*/
fun getNumSeats(planeType: String) = do {
	var maxSeats =
		if (planeType contains('737'))
			150
		else
			300
	---
	maxSeats
}
---
flights: (payload..*return map (object,index) ->{
	destination: object.destination,
	price: object.price as Currency as Number,
	//totalSeats: getNumSeats(object.planeType as String),
	totalSeats: lookup("getTotalSeats", {planeType:object.planeType}),
	planeType: dasherize(replace(object.planeType, /(Boing)/) with "Boeing"),
	departureDate: object.departureDate as Date {format: "yyyy/MM/dd"} as String {format: "MMM dd, yyyy"},
	availableSeats: object.emptySeats as Number
} as Flight) distinctBy $ filter ($.availableSeats !=0) orderBy $.departureDate orderBy $.price
]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="399aaf6d-882e-4365-a3fc-59222f84f36c" />
	</flow>
</mule>
